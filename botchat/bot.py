import logging
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import BufferedInputFile
import requests
import asyncio
import re
import google.generativeai as genai
import aiohttp
from asyncio import TimeoutError
import socket
from io import BytesIO
from urllib.parse import urlparse

API_TOKEN = '7797539327:AAFDcShHxoUyNzk9D0ymQer-Uc_ffsuOH-U'
SHODAN_API_KEY = '0AU7CEgd89QiIYQUlouI4dwU1bWoMWsq'
VIRUSTOTAL_API_KEY = '897ae61e98e5dd2ffaa3a23976aec52b0d0bb2f01a04d3583955686de9ff6719'
GEMINI_API_KEY = 'AIzaSyA7feCQnxaRmPgnztD5b7J3ppJWQ7IWDYE'
URLSCAN_API_KEY = '0195baa8-39a8-788f-978c-9251fd651867'  # –°—ñ–∑ –±–µ—Ä–≥–µ–Ω API –∫—ñ–ª—Ç—ñ

user_lang = {}
user_conversation_history = {}
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("models/gemini-1.5-pro")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

def log_message(user, prompt, response):
    with open("logs.txt", "a", encoding="utf-8") as f:
        f.write(f"üë§ {user} | ‚è∞ {datetime.datetime.now()}\nüîπ –°“±—Ä–∞–Ω—ã—Å: {prompt}\nüî∏ –ñ–∞—É–∞–ø: {response}\n{'-'*40}\n")

def is_ip_address(text):
    pattern = r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
    return bool(re.match(pattern, text.strip()))

def is_domain(text):
    pattern = r"^(?!-)[A-Za-z0-9-]{1,63}(?:\.[A-Za-z]{2,})+$"
    return bool(re.match(pattern, text.strip()))

def is_url(text):
    pattern = r"^(https?:\/\/)?([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(\/.*)?$"
    return bool(re.match(pattern, text.strip()))

async def get_ip_from_domain(domain):
    try:
        ip = socket.gethostbyname(domain)
        return ip
    except:
        return "IP –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã."

async def get_shodan_data(ip):
    return f"Shodan –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ: –ê—à—ã“õ –ø–æ—Ä—Ç—Ç–∞—Ä - 80, 443; –û–° - Linux"

async def get_virustotal_data(ip_or_domain):
    url = f"https://www.virustotal.com/api/v3/domains/{ip_or_domain}" if not is_ip_address(ip_or_domain) else f"https://www.virustotal.com/api/v3/ip_addresses/{ip_or_domain}"
    headers = {"x-apikey": VIRUSTOTAL_API_KEY}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                stats = data['data']['attributes']['last_analysis_stats']
                return f"VirusTotal –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ: –ó–∏—è–Ω–¥—ã - {stats['malicious']}, –ö“Ø–¥—ñ–∫—Ç—ñ - {stats['suspicious']}, –ê–Ω—ã“õ—Ç–∞–ª–º–∞“ì–∞–Ω - {stats['undetected']}"
            elif response.status == 429:
                print(f"VirusTotal 429 “õ–∞—Ç–µ—Å—ñ: –ö–≤–æ—Ç–∞ —Ç–∞—É—Å—ã–ª–¥—ã.")
                return "VirusTotal –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å: –ö–≤–æ—Ç–∞ —Ç–∞—É—Å—ã–ª–¥—ã."
            return "VirusTotal –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å."

async def get_whois_data(ip_or_domain):
    try:
        response = requests.get(f"http://ip-api.com/json/{ip_or_domain}" if is_ip_address(ip_or_domain) else f"http://ip-api.com/json/{await get_ip_from_domain(ip_or_domain)}")
        data = response.json()
        if response.status_code == 429:
            print(f"WHOIS 429 “õ–∞—Ç–µ—Å—ñ: –ö–≤–æ—Ç–∞ —Ç–∞—É—Å—ã–ª–¥—ã.")
            return "WHOIS –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å: –ö–≤–æ—Ç–∞ —Ç–∞—É—Å—ã–ª–¥—ã."
        return f"WHOIS: –ï–ª - {data.get('country', '–ë–µ–ª–≥—ñ—Å—ñ–∑')}, ISP - {data.get('isp', '–ë–µ–ª–≥—ñ—Å—ñ–∑')}"
    except:
        return "WHOIS –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å."

async def scan_url_with_urlscan(url, message: types.Message):
    headers = {"API-Key": URLSCAN_API_KEY}
    payload = {"url": url if url.startswith("http") else f"https://{url}", "visibility": "public"}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post("https://urlscan.io/api/v1/scan/", json=payload, headers=headers) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    scan_uuid = result["uuid"]
                    print(f"URLScan: –°–∫–∞–Ω–µ—Ä–ª–µ—É –±–∞—Å—Ç–∞–ª–¥—ã: {result['api']}")
                elif resp.status == 429:
                    print(f"URLScan 429 “õ–∞—Ç–µ—Å—ñ: –ö–≤–æ—Ç–∞ —Ç–∞—É—Å—ã–ª–¥—ã.")
                    await message.answer("‚ö†Ô∏è URLScan –∫–≤–æ—Ç–∞—Å—ã —Ç–∞—É—Å—ã–ª–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –∂–∞“£–∞ API –∫—ñ–ª—Ç—ñ–Ω “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.")
                    return None
                else:
                    await message.answer(f"URLScan —Å–∫–∞–Ω–µ—Ä–ª–µ—É “õ–∞—Ç–µ—Å—ñ: {await resp.text()}")
                    return None

            await asyncio.sleep(40)
            async with session.get(f"https://urlscan.io/api/v1/result/{scan_uuid}/") as resp:
                if resp.status == 200:
                    screenshot_url = f"https://urlscan.io/screenshots/{scan_uuid}.png"
                    async with session.get(screenshot_url) as screenshot_resp:
                        if screenshot_resp.status == 200:
                            screenshot_data = await screenshot_resp.read()
                            photo = BufferedInputFile(screenshot_data, filename="screenshot.png")
                            await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=f"URLScan –µ—Å–µ–±—ñ: https://urlscan.io/result/{scan_uuid}/")
                            return f"URLScan:\n–¢–æ–ª—ã“õ –µ—Å–µ–ø: https://urlscan.io/result/{scan_uuid}/"
                        else:
                            await message.answer("URLScan —Å–∫—Ä–∏–Ω—à–æ—Ç—Ç—ã –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ.")
                            return None
                else:
                    await message.answer("URLScan –Ω”ô—Ç–∏–∂–µ—Å—ñ ”ô–ª—ñ –¥–∞–π—ã–Ω –µ–º–µ—Å. –°–∞–π—Ç—Ç—ã —Å–∫–∞–Ω–µ—Ä–ª–µ—É “±–∑–∞“ì—ã—Ä–∞“õ —É–∞“õ—ã—Ç –∞–ª—É—ã –º“Ø–º–∫—ñ–Ω.")
                    return None
        except Exception as e:
            await message.answer(f"URLScan “õ–∞—Ç–µ—Å—ñ: {str(e)}")
            return None

async def process_ip_or_domain_or_url(target, message: types.Message, is_ip=True, is_url=False):
    user_id = message.from_user.id
    lang = user_lang.get(user_id, "kk")
    try:
        if is_ip:
            ip = target
            shodan_data = await get_shodan_data(ip)
            vt_data = await get_virustotal_data(ip)
            whois_data = await get_whois_data(ip)
            full_data = f"{shodan_data}\n{vt_data}\n{whois_data}"
            prompt = f"{ip} IP –º–µ–∫–µ–Ω–∂–∞–π—ã —Ç—É—Ä–∞–ª—ã –∫–µ–ª–µ—Å—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä –∂”ô–Ω–µ “õ–∞–Ω–¥–∞–π ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä –∂–∞—Å–∞—É“ì–∞ –±–æ–ª–∞—Ç—ã–Ω—ã —Ç—É—Ä–∞–ª—ã –∫–µ“£–µ—Å—Ç–µ—Ä –±–µ—Ä: {full_data}"
        elif is_url:
            parsed_url = urlparse(target)
            domain = parsed_url.netloc
            ip = await get_ip_from_domain(domain)
            shodan_data = await get_shodan_data(ip)
            vt_data = await get_virustotal_data(domain)
            whois_data = await get_whois_data(domain)
            urlscan_result = await scan_url_with_urlscan(target, message)
            if urlscan_result:
                full_data = f"IP: {ip}\n{shodan_data}\n{vt_data}\n{whois_data}\n{urlscan_result}"
            else:
                full_data = f"IP: {ip}\n{shodan_data}\n{vt_data}\n{whois_data}"
            prompt = f"{target} URL –º–µ–∫–µ–Ω–∂–∞–π—ã —Ç—É—Ä–∞–ª—ã –∫–µ–ª–µ—Å—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä –∂”ô–Ω–µ —Ñ–∏—à–∏–Ω–≥—Ç—ñ–∫ —Å–∞–π—Ç –µ–∫–µ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä—ñ–ø, “õ–∞–Ω–¥–∞–π ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä –∂–∞—Å–∞—É“ì–∞ –±–æ–ª–∞—Ç—ã–Ω—ã —Ç—É—Ä–∞–ª—ã –∫–µ“£–µ—Å—Ç–µ—Ä –±–µ—Ä: {full_data}"
        else:
            domain = target
            ip = await get_ip_from_domain(domain)
            shodan_data = await get_shodan_data(ip)
            vt_data = await get_virustotal_data(domain)
            whois_data = await get_whois_data(domain)
            urlscan_result = await scan_url_with_urlscan(domain, message)
            if urlscan_result:
                full_data = f"IP: {ip}\n{shodan_data}\n{vt_data}\n{whois_data}\n{urlscan_result}"
            else:
                full_data = f"IP: {ip}\n{shodan_data}\n{vt_data}\n{whois_data}"
            prompt = f"{domain} –¥–æ–º–µ–Ω—ñ —Ç—É—Ä–∞–ª—ã –∫–µ–ª–µ—Å—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä –∂”ô–Ω–µ “õ–∞–Ω–¥–∞–π ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä –∂–∞—Å–∞—É“ì–∞ –±–æ–ª–∞—Ç—ã–Ω—ã —Ç—É—Ä–∞–ª—ã –∫–µ“£–µ—Å—Ç–µ—Ä –±–µ—Ä: {full_data}"

        print(f"Sending prompt to Gemini: {prompt}")
        try:
            async with asyncio.timeout(45):  # –£–∞“õ—ã—Ç —à–µ–≥—ñ–Ω 45 —Å–µ–∫—É–Ω–¥“õ–∞ “±–ª“ì–∞–π—Ç—Ç—ã–º
                response = await asyncio.to_thread(model.generate_content, [prompt])
                print(f"Gemini response: {response.text}")
                await message.answer(response.text)
                if user_id not in user_conversation_history:
                    user_conversation_history[user_id] = []
                user_conversation_history[user_id].append({"request": target, "response": response.text})
                log_message(message.from_user.username or user_id, target, response.text)
        except TimeoutError:
            await message.answer("‚ö†Ô∏è AI –∂–∞—É–∞–±—ã —É–∞“õ—ã—Ç—Ç–∞–Ω –∞—Å—ã–ø –∫–µ—Ç—Ç—ñ. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.")
            print(f"Timeout occurred while processing: {target}")
    except Exception as e:
        error_msg = f"‚ö†Ô∏è {target} ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã: {str(e)}"
        await message.answer(error_msg)
        print(error_msg)

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer("""
–°”ô–ª–µ–º! –ú–µ–Ω OSINT –∫”©–º–µ–∫—à—ñ –±–æ—Ç–ø—ã–Ω. IP-–∞–¥—Ä–µ—Å—Ç—ñ (–º—ã—Å–∞–ª—ã, 46.4.73.62), –¥–æ–º–µ–Ω–¥—ñ (–º—ã—Å–∞–ª—ã, google.com) –Ω–µ–º–µ—Å–µ URL-–¥—ñ (–º—ã—Å–∞–ª—ã, https://example.com/path) –∂–∞–∑—Å–∞“£—ã–∑, –º–µ–Ω –±–∞—Ä–ª—ã“õ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã –∂”ô–Ω–µ –∫–µ“£–µ—Å—Ç–µ—Ä–¥—ñ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ –±–µ—Ä–µ–º—ñ–Ω!
""")

@dp.message(lambda message: not message.document and not message.photo)
async def chat_with_ai(message: types.Message):
    text = message.text.strip()
    if message.text.startswith("/"):
        return

    print(f"Processing text: {text}")
    user_id = message.from_user.id
    lang = user_lang.get(user_id, "kk")

    if user_id not in user_conversation_history:
        user_conversation_history[user_id] = []

    if is_ip_address(text):
        await process_ip_or_domain_or_url(text, message, is_ip=True, is_url=False)
        return
    elif is_url(text):
        await process_ip_or_domain_or_url(text, message, is_ip=False, is_url=True)
        return
    elif is_domain(text):
        await process_ip_or_domain_or_url(text, message, is_ip=False, is_url=False)
        return

    if text.lower() in ["—Å”ô–ª–µ–º", "–ø—Ä–∏–≤–µ—Ç", "hello", "hi"]:
        response_text = f"–°”ô–ª–µ–º! –ú–µ–Ω OSINT –∫”©–º–µ–∫—à—ñ –±–æ—Ç–ø—ã–Ω. “ö–∞–ª–∞–π –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω?"
        await message.answer(response_text)
        log_message(message.from_user.username or user_id, text, response_text)
        return

    history_str = "\n".join([f"–°“±—Ä–∞“õ: {item['request']}\n–ñ–∞—É–∞–ø: {item['response']}" for item in user_conversation_history[user_id]]) or "”ò–∑—ñ—Ä–≥–µ –µ—à“õ–∞–Ω–¥–∞–π —Å“±—Ä–∞“õ-–∂–∞—É–∞–ø –∂–æ“õ."

    if "—Ç—É—Ä–∞–ª—ã" in text.lower() or "“õ–∞–π–¥–∞" in text.lower() or "–∞–π–ø–∏" in text.lower() or "–¥–æ–º–µ–Ω" in text.lower():
        if user_conversation_history[user_id] and any(is_ip_address(item["request"]) or is_domain(item["request"]) or is_url(item["request"]) for item in user_conversation_history[user_id]):
            last_target = next(item["request"] for item in reversed(user_conversation_history[user_id]) if is_ip_address(item["request"]) or is_domain(item["request"]) or is_url(item["request"]))
            prompt = f"–ê–ª–¥—ã“£“ì—ã ”ô“£–≥—ñ–º–µ:\n{history_str}\n\n–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã: {text}. –°–æ“£“ì—ã —Ç–∞–ª“õ—ã–ª–∞–Ω“ì–∞–Ω –æ–±—ä–µ–∫—Ç: {last_target}. “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ –∂–∞—É–∞–ø –±–µ—Ä, –±–∞—Ä–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã –µ—Å–∫–µ—Ä–µ –æ—Ç—ã—Ä—ã–ø."
        else:
            prompt = f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã: {text}. “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ “õ—ã—Å“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä, “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ OSINT –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω."
    else:
        prompt = f"–ê–ª–¥—ã“£“ì—ã ”ô“£–≥—ñ–º–µ:\n{history_str}\n\n–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã: {text}. “ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ “õ—ã—Å“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä, “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ OSINT –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω."

    try:
        async with asyncio.timeout(45):  # –£–∞“õ—ã—Ç —à–µ–≥—ñ–Ω 45 —Å–µ–∫—É–Ω–¥“õ–∞ “±–ª“ì–∞–π—Ç—Ç—ã–º
            response = await asyncio.to_thread(model.generate_content, [prompt])
            print(f"Gemini response for '{text}': {response.text}")
            await message.answer(response.text)
            user_conversation_history[user_id].append({"request": text, "response": response.text})
            log_message(message.from_user.username or user_id, text, response.text)
    except TimeoutError:
        await message.answer("‚ö†Ô∏è AI –∂–∞—É–∞–±—ã —É–∞“õ—ã—Ç—Ç–∞–Ω –∞—Å—ã–ø –∫–µ—Ç—Ç—ñ. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.")
        print(f"Timeout occurred while processing general query: {text}")
    except Exception as e:
        error_msg = f"‚ö†Ô∏è AI –∂–∞—É–∞–ø –±–µ—Ä–µ –∞–ª–º–∞–¥—ã. “ö–∞—Ç–µ: {str(e)}"
        await message.answer(error_msg)
        print(error_msg)

@dp.message(lambda m: m.text and m.text.startswith("/ip"))
async def handle_ip(message: types.Message):
    print(f"Processing /ip: {message.text}")
    try:
        parts = message.text.split(" ", 1)
        if len(parts) > 1 and is_ip_address(parts[1]):
            await process_ip_or_domain_or_url(parts[1], message, is_ip=True, is_url=False)
        else:
            await message.answer("–ñ–∞—Ä–∞–º–¥—ã IP –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω –±–µ—Ä—ñ“£—ñ–∑. –ú—ã—Å–∞–ª—ã: /ip 46.4.73.62")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è /ip –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ: {str(e)}")

@dp.message(lambda m: m.text and m.text.startswith("/dork"))
async def handle_dork(message: types.Message):
    print(f"Processing /dork: {message.text}")
    try:
        parts = message.text.split(" ", 1)
        if len(parts) <= 1:
            await message.answer("‚ö†Ô∏è –°“±—Ä–∞—É–¥—ã –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑. –ú—ã—Å–∞–ª—ã: /dork site:gov.kz intext:\"password\"")
            return
        query = parts[1]
        dork_url = f"https://www.google.com/search?q={requests.utils.quote(query)}"
        response_text = f"üîç –°—ñ–∑–¥—ñ“£ Dork —Å“±—Ä–∞—É—ã“£—ã–∑ –¥–∞–π—ã–Ω:\n{dork_url}"
        await message.answer(response_text)
        log_message(message.from_user.username or message.from_user.id, message.text, response_text)
        if message.from_user.id not in user_conversation_history:
            user_conversation_history[message.from_user.id] = []
        user_conversation_history[message.from_user.id].append({"request": message.text, "response": response_text})
    except Exception as e:
        error_msg = f"‚ö†Ô∏è /dork –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω–¥–∞ “õ–∞—Ç–µ: {str(e)}"
        await message.answer(error_msg)
        print(error_msg)

async def main():
    while True:
        try:
            await dp.start_polling(bot)
        except (aiohttp.client_exceptions.ClientConnectorError, ConnectionResetError) as e:
            print(f"–ñ–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ: {e}. 5 —Å–µ–∫—É–Ω–¥—Ç–∞–Ω –∫–µ–π—ñ–Ω “õ–∞–π—Ç–∞ ”ô—Ä–µ–∫–µ—Ç –µ—Ç—É...")
            await asyncio.sleep(5)
        except Exception as e:
            print(f"–ö“Ø—Ç–ø–µ–≥–µ–Ω “õ–∞—Ç–µ: {e}")
            break

if __name__ == '__main__':
    asyncio.run(main())
