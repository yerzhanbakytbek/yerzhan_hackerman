from flask import Flask, request, jsonify
from flask_cors import CORS
import google.generativeai as genai
import requests
import re
import socket
from urllib.parse import urlparse
import aiohttp
import asyncio
import logging
from datetime import datetime

app = Flask(__name__)
CORS(app)

# API –∫–ª—é—á—Ç–µ—Ä—ñ
SHODAN_API_KEY = '0AU7CEgd89QiIYQUlouI4dwU1bWoMWsq'
VIRUSTOTAL_API_KEY = '897ae61e98e5dd2ffaa3a23976aec52b0d0bb2f01a04d3583955686de9ff6719'
GEMINI_API_KEY = 'AIzaSyA7feCQnxaRmPgnztD5b7J3ppJWQ7IWDYE'
URLSCAN_API_KEY = '0195baa8-39a8-788f-978c-9251fd651867'

# –õ–æ–≥–≥–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Å—ã
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('server.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Gemini –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Å—ã
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("models/gemini-1.5-pro")

def log_request(ip_or_domain, response):
    """–°“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä–¥—ã –ª–æ–≥—Ç–∞—É"""
    with open("requests.log", "a", encoding="utf-8") as f:
        f.write(f"‚è∞ {datetime.now()}\nüîπ –°“±—Ä–∞–Ω—ã—Å: {ip_or_domain}\nüî∏ –ñ–∞—É–∞–ø: {response}\n{'-'*40}\n")

def is_ip_address(text):
    """IP –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω —Ç–µ–∫—Å–µ—Ä—É"""
    pattern = r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
    return bool(re.match(pattern, text.strip()))

def is_domain(text):
    """–î–æ–º–µ–Ω–¥—ñ —Ç–µ–∫—Å–µ—Ä—É"""
    pattern = r"^(?!-)[A-Za-z0-9-]{1,63}(?:\.[A-Za-z]{2,})+$"
    return bool(re.match(pattern, text.strip()))

def is_url(text):
    """URL –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω —Ç–µ–∫—Å–µ—Ä—É"""
    pattern = r"^(https?:\/\/)?([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(\/.*)?$"
    return bool(re.match(pattern, text.strip()))

def get_ip_from_domain(domain):
    """–î–æ–º–µ–Ω–Ω–µ–Ω IP –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω –∞–ª—É"""
    try:
        ip = socket.gethostbyname(domain)
        return ip
    except Exception as e:
        logger.error(f"IP –∞–ª—É “õ–∞—Ç–µ—Å—ñ {domain}: {str(e)}")
        return "IP –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω –∞–Ω—ã“õ—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã"

def get_shodan_data(ip):
    """Shodan-–Ω–∞–Ω –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ –∞–ª—É"""
    try:
        url = f"https://api.shodan.io/shodan/host/{ip}?key={SHODAN_API_KEY}"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            ports = ", ".join(str(port) for port in data.get("ports", []))
            os = data.get("os", "–ê–Ω—ã“õ—Ç–∞–ª–º–∞–¥—ã")
            return f"Shodan –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ: –ê—à—ã“õ –ø–æ—Ä—Ç—Ç–∞—Ä - {ports}; –û–° - {os}"
    except Exception as e:
        logger.error(f"Shodan “õ–∞—Ç–µ—Å—ñ {ip}: {str(e)}")
    return "Shodan –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å"

def get_virustotal_data(ip_or_domain):
    """VirusTotal-–¥–∞–Ω –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ –∞–ª—É"""
    try:
        url = f"https://www.virustotal.com/api/v3/{'domains' if not is_ip_address(ip_or_domain) else 'ip_addresses'}/{ip_or_domain}"
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            stats = data['data']['attributes']['last_analysis_stats']
            return f"VirusTotal –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ: –ó–∏—è–Ω–¥—ã - {stats['malicious']}, –ö“Ø–¥—ñ–∫—Ç—ñ - {stats['suspicious']}, –ê–Ω—ã“õ—Ç–∞–ª–º–∞“ì–∞–Ω - {stats['undetected']}"
        elif response.status_code == 429:
            logger.warning(f"VirusTotal –∫–≤–æ—Ç–∞ —à–µ–≥—ñ–Ω–µ –∂–µ—Ç—Ç—ñ: {ip_or_domain}")
            return "VirusTotal –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å: –ö–≤–æ—Ç–∞ —Ç–∞—É—Å—ã–ª–¥—ã"
    except Exception as e:
        logger.error(f"VirusTotal “õ–∞—Ç–µ—Å—ñ {ip_or_domain}: {str(e)}")
    return "VirusTotal –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å"

def get_whois_data(ip_or_domain):
    """WHOIS –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ–Ω –∞–ª—É"""
    try:
        response = requests.get(f"http://ip-api.com/json/{ip_or_domain}")
        if response.status_code == 200:
            data = response.json()
            return f"WHOIS: –ï–ª - {data.get('country', '–ë–µ–ª–≥—ñ—Å—ñ–∑')}, ISP - {data.get('isp', '–ë–µ–ª–≥—ñ—Å—ñ–∑')}"
        elif response.status_code == 429:
            logger.warning(f"WHOIS –∫–≤–æ—Ç–∞ —à–µ–≥—ñ–Ω–µ –∂–µ—Ç—Ç—ñ: {ip_or_domain}")
            return "WHOIS –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å: –ö–≤–æ—Ç–∞ —Ç–∞—É—Å—ã–ª–¥—ã"
    except Exception as e:
        logger.error(f"WHOIS “õ–∞—Ç–µ—Å—ñ {ip_or_domain}: {str(e)}")
    return "WHOIS –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –µ–º–µ—Å"

@app.route('/api/chat', methods=['POST'])
def chat():
    """–ß–∞—Ç —Å“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä—ã–Ω ”©“£–¥–µ—É"""
    try:
        data = request.json
        text = data.get('message', '').strip()
        
        if not text:
            return jsonify({'error': '–•–∞–±–∞—Ä–ª–∞–º–∞ –±–æ—Å –±–æ–ª–º–∞—É—ã –∫–µ—Ä–µ–∫'}), 400

        logger.info(f"–ñ–∞“£–∞ —Å“±—Ä–∞–Ω—ã—Å –∞–ª—ã–Ω–¥—ã: {text}")

        if is_ip_address(text):
            ip = text
            shodan_data = get_shodan_data(ip)
            vt_data = get_virustotal_data(ip)
            whois_data = get_whois_data(ip)
            full_data = f"{shodan_data}\n{vt_data}\n{whois_data}"
            prompt = f"{ip} IP –º–µ–∫–µ–Ω–∂–∞–π—ã —Ç—É—Ä–∞–ª—ã –∫–µ–ª–µ—Å—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä –∂”ô–Ω–µ “õ–∞–Ω–¥–∞–π ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä –∂–∞—Å–∞—É“ì–∞ –±–æ–ª–∞—Ç—ã–Ω—ã —Ç—É—Ä–∞–ª—ã –∫–µ“£–µ—Å—Ç–µ—Ä –±–µ—Ä: {full_data}"
        
        elif is_url(text):
            parsed_url = urlparse(text)
            domain = parsed_url.netloc
            ip = get_ip_from_domain(domain)
            shodan_data = get_shodan_data(ip)
            vt_data = get_virustotal_data(domain)
            whois_data = get_whois_data(domain)
            full_data = f"IP: {ip}\n{shodan_data}\n{vt_data}\n{whois_data}"
            prompt = f"{text} URL –º–µ–∫–µ–Ω–∂–∞–π—ã —Ç—É—Ä–∞–ª—ã –∫–µ–ª–µ—Å—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä –∂”ô–Ω–µ —Ñ–∏—à–∏–Ω–≥—Ç—ñ–∫ —Å–∞–π—Ç –µ–∫–µ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä—ñ–ø, “õ–∞–Ω–¥–∞–π ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä –∂–∞—Å–∞—É“ì–∞ –±–æ–ª–∞—Ç—ã–Ω—ã —Ç—É—Ä–∞–ª—ã –∫–µ“£–µ—Å—Ç–µ—Ä –±–µ—Ä: {full_data}"
        
        elif is_domain(text):
            domain = text
            ip = get_ip_from_domain(domain)
            shodan_data = get_shodan_data(ip)
            vt_data = get_virustotal_data(domain)
            whois_data = get_whois_data(domain)
            full_data = f"IP: {ip}\n{shodan_data}\n{vt_data}\n{whois_data}"
            prompt = f"{domain} –¥–æ–º–µ–Ω—ñ —Ç—É—Ä–∞–ª—ã –∫–µ–ª–µ—Å—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä –∂”ô–Ω–µ “õ–∞–Ω–¥–∞–π ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Ä –∂–∞—Å–∞—É“ì–∞ –±–æ–ª–∞—Ç—ã–Ω—ã —Ç—É—Ä–∞–ª—ã –∫–µ“£–µ—Å—Ç–µ—Ä –±–µ—Ä: {full_data}"
        
        else:
            return jsonify({'error': '–ñ–∞—Ä–∞–º—Å—ã–∑ —Ñ–æ—Ä–º–∞—Ç. IP –º–µ–∫–µ–Ω–∂–∞–π—ã–Ω, –¥–æ–º–µ–Ω–¥—ñ –Ω–µ–º–µ—Å–µ URL –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑'}), 400

        try:
            response = model.generate_content([prompt])
            log_request(text, response.text)
            return jsonify({'response': response.text})
        except Exception as e:
            logger.error(f"Gemini “õ–∞—Ç–µ—Å—ñ: {str(e)}")
            return jsonify({'error': 'AI –∂–∞—É–∞–ø –±–µ—Ä–µ –∞–ª–º–∞–¥—ã'}), 500

    except Exception as e:
        logger.error(f"–ñ–∞–ª–ø—ã “õ–∞—Ç–µ: {str(e)}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True, port=5500) 